function [ptr]=run_imputation(ptr,processed_data_folder,day,overrides,goodthresh,boundarycondition,HOVinfo,MajorOR,MajorFR,reportFolder,suffix,MeasureT,SimT,DemandT,FirstAndLastPostMiles,optionalInputs)
% Dependencies: (These folders should be in your Matlab path
%   L0-utilities/lib
%   L0-utilities/lib/xml_io_tools_2007_07
%   L0-utilities/lib/qpc
%   L0-utilities/lib/cvx

% process optional inputs (ramp bounds and artificial mainline data) add
% any other optional inputs here.

% convert units when necessary
if ~strcmp(ptr.scenario.settings.units,'US')
    ptr.change_units_to('US');
end

[boundedImputation,insertArtificialData,ArtificialDataFileName,ramps] = processOptionalInputs(optionalInputs);

clear optionalInputs

% create imputation directory if it doesn't exist
if(~exist(reportFolder,'dir'))
    mkdir(reportFolder)
end

%% Process Scenario and Data Info to Create Imputation Network
[OR,FR]=makeORFR(ptr);

loop_health = makeloophealth(processed_data_folder,day);

detectors = makeDetectors(ptr,loop_health,overrides);
clear loop_health overrides

FDParams = makeFDParams(ptr);

linkstructure = makeLinkstructure(ptr,processed_data_folder,day,HOVinfo,goodthresh,detectors,OR,FR,MajorOR,MajorFR);
clear HOVinfo

save(fullfile(reportFolder,['AfterLinkstructure' suffix '_' datestr(day)]));

% construct megacells
initial_celldata = InitializeCellData(linkstructure,detectors,goodthresh);

save(fullfile(reportFolder,['AfterInitialCellData' suffix '_' datestr(day)]));

% associate fundamental diagrams and data with megacells
imputation_celldata = Impute_CreateCellData_Automated(processed_data_folder,day,initial_celldata,detectors,FDParams,goodthresh,1); % the last option is for using same FD params for the HOV lane, set to 0 if not
clear processed_data_folder initial_celldata

if insertArtificialData
    ArtificialData = MatToStruct(ArtificialDataFileName);
    imputation_celldata = InsertBogusMainlineData(imputation_celldata,ArtificialData);
end

clear insertArtificialData ArtificialDataFileName ArtificialData

% imputation_celldata = UseBogusMainlineDataEachLink(imputation_celldata,BogusData,linkstructure);
save(fullfile(reportFolder,['AfterFilledCellData_' suffix '_' datestr(day)]));

%% Run Imputation on Imputation Network

[Flow,...
 Density,...
 Speed,...
 OrPresent,...
 FrPresent,...
 ImputeOR,...
 ImputeFR,...
 CellLengths,...
 ORBoundsLower,...
 ORBoundsUpper,...
 FRBoundsLower,...
 FRBoundsUpper,...
 Demand_Giv,...
 DemandLower,...
 DemandUpper,...
 BETA_Giv,...
 BETALower,...
 BETAUpper,...
 OrFlow_Giv,...
 FrFlow_Giv,...
 Capacities,...
 FreeFlowSpeeds,...
 CongestionSpeeds,...
 JamDensities,...
 PM,...
 DownstreamCongested] = ImputationNetworkToAlgorithmParser(imputation_celldata,...
                                                            boundarycondition,...
                                                            MeasureT,...
                                                            SimT,...
                                                            FirstAndLastPostMiles,...
                                                            ramps,...
                                                            ptr);
                                                        
clear boundarycondition FirstAndLastPostMiles
 
[FlowSim,...
 DensitySim,...
 SpeedSim,...
 OrFlowSim,...
 FrFlowSim,...
 FreewayDemands,...
 Splits,...
 OnrampDemands,...
 CumulativeDemands,...
 ImputeOR,...
 ImputeFR,...
 OrPresent,...
 FrPresent,...
 OrFlow_Giv,...
 FrFlow_Giv] = Imputation_Core_Algorithm(Flow,...
                                         Density,...
                                         Speed,...
                                         OrPresent,...
                                         FrPresent,...
                                         ImputeOR,...
                                         ImputeFR,...
                                         CellLengths,...
                                         ORBoundsLower,...
                                         ORBoundsUpper,...
                                         FRBoundsLower,...
                                         FRBoundsUpper,...
                                         Demand_Giv,...
                                         DemandLower,...
                                         DemandUpper,...
                                         BETA_Giv,...
                                         BETALower,...
                                         BETAUpper,...
                                         OrFlow_Giv,...
                                         FrFlow_Giv,...
                                         Capacities,...
                                         FreeFlowSpeeds,...
                                         CongestionSpeeds,...
                                         JamDensities,...
                                         SimT,...
                                         DownstreamCongested,...
                                         boundedImputation);
                                     
clear ORBoundsLower ORBoundsUpper FRBoundsLower FRBoundsUpper DemandLower DemandUpper
clear BETALower BETAUpper

save(fullfile(reportFolder,['AfterImputation_' suffix '_' datestr(day)]));
if ispc
    report_Imputation(imputation_celldata,Flow,Density,Speed,FlowSim,DensitySim,SpeedSim,ImputeOR,ImputeFR,FreewayDemands,FrFlowSim,CellLengths,PM,SimT,DemandT,FDParams,day,MajorOR,MajorFR,reportFolder,suffix,ramps)
end

%% Split the Mega-Cells to obtain Flows for the original network topology

[Flow_exp,...
 Density_exp,...
 Speed_exp,...
 FlowSim_exp,...
 DensitySim_exp,...
 SpeedSim_exp,...
 FreewayDemands_exp,...
 Splits_exp,...
 OrFlowSim_exp,...
 FrFlowSim_exp,...
 vf_exp,...
 w_exp,...
 Qmax_exp,...
 rhojam_exp,...
 LinkGroupings,...
 AfterSplits] = SplitMegaCells(imputation_celldata,...
                                    Flow,...
                                    Density,...
                                    Speed,...
                                    FlowSim,...
                                    DensitySim,...
                                    SpeedSim,...
                                    CumulativeDemands,...
                                    OnrampDemands,...
                                    FreewayDemands,...
                                    Splits,...
                                    OrPresent,...
                                    FrPresent,...
                                    ImputeOR,...
                                    ImputeFR,...
                                    OrFlowSim,...
                                    FrFlowSim,...
                                    OrFlow_Giv,...
                                    FrFlow_Giv,...
                                    Demand_Giv,...
                                    BETA_Giv,...
                                    FreeFlowSpeeds,...
                                    CongestionSpeeds,...
                                    Capacities,...
                                    JamDensities,...
                                    CellLengths,...
                                    PM,...
                                    SimT,...
                                    DownstreamCongested,...
                                    linkstructure,...
                                    day,...
                                    FDParams,...
                                    MeasureT,...
                                    suffix,...
                                    reportFolder,...
                                    ramps,...
                                    boundedImputation);
                                
clear Flow Density Speed FlowSim DensitySim SpeedSim CumulativeDemands OnrampDemands
clear FreewayDemands Splits OrPresent FrPresent ImputeOR ImputeFR
clear OrFlowSim FrFlowSim OrFlow_Giv FrFlow_Giv Demand_Giv BETA_Giv
clear FreeFlowSpeeds CongestionSpeeds Capacities JamDensities
clear CellLengths PM DownStreamCongested OR FR FDParams detectors
clear goodthresh MeasureT boundedImputation
                                
save(fullfile(reportFolder,['AfterSplit_' suffix '_' datestr(day)]));

[SplitCellData] = ImputationAlgorithmToNetworkParser(imputation_celldata,...
                                                     Flow_exp,...
                                                     Density_exp,...
                                                     Speed_exp,...
                                                     FlowSim_exp,...
                                                     DensitySim_exp,...
                                                     SpeedSim_exp,...
                                                     FreewayDemands_exp,...
                                                     Splits_exp,...
                                                     OrFlowSim_exp,...
                                                     FrFlowSim_exp,...
                                                     vf_exp,...
                                                     w_exp,...
                                                     Qmax_exp,...
                                                     rhojam_exp,...
                                                     LinkGroupings,...
                                                     SimT);
if ispc
    report_MegaCellSplitting(SplitCellData,AfterSplits,day,MajorOR,MajorFR,SimT,DemandT,ramps,reportFolder,suffix,0)
end

clear imputation_celldata Flow_exp Density_exp Speed_exp FlowSim_exp
clear DensitySim_exp SpeedSim_exp FreewayDemands_exp Splits_exp OrFlowSim_exp
clear FrFlowSim_exp vf_exp w_exp Qmax_exp rhojam_exp LinkGroupings
clear AfterSplits MajorOR MajorFR ramps

%% Assemble the new Scenario file with the new Fundamental Diagrams, Demands and Split Ratios
linkstructure_demands = MakeDemandProfiles(linkstructure,SplitCellData,SimT,DemandT);
clear linkstructure SimT

attachDemandsAndSplits(ptr,linkstructure_demands,DemandT)

attachFundamentalDiagrams(ptr,SplitCellData)

clear SplitCellData DemandT

ptr.save(fullfile(reportFolder,['FinalResult_' suffix '_' datestr(day) '.xml']))

disp('done')